""" This module is responsible for managing the wallpaper. """
from PIL import Image
from urllib.request import urlopen
from pathlib import Path
from uuid import uuid4
from wallauto.reddit import RedditClient
from wallauto.yamlmanager import YamlManger
from wallauto.wallpaperSetter import WallpaperSetter


class Wallpaper:

    def __init__(self, config_file):
        self.config_file = config_file
        self.config_data = self.get_config_data(config_file)

    def get_config_data(self, config_file):
        """ Get data from config file. """
        config_file = Path(config_file)
        return YamlManger(config_file).get()

    def get_reddit_posts(self):
        """ Get image posts from subreddit. """
        reddit = RedditClient(
            **self.config_data['reddit_account']
        )
        payload = {
            "subreddit": '+'.join(self.config_data['subreddits']),
            "secc": self.config_data['filter'],
            "time_filter": self.config_data['time_filter'],
            "limit": self.config_data['amount_post'],
        }
        posts = [
            {'title': post.title,
             'author': post.author.name,
             'url': post.url}
            for post in reddit.sub(**payload)
            if post.url.lower().endswith('.jpg')
            and 'https://i.redd.it/' in post.url
        ]
        return posts

    def save_image(self, image_id, image_data):
        """ Save image data to a DB
        Params:
            image_id (string): id generated by uuid4.
            image_data (dict): {author, title, url}
        """
        image_db = Path(self.config_data['image_db']) / 'WallAutomaterDB.yml'
        image_db.exists() or image_db.touch()
        image_depot = Path(self.config_data['image_depot'])
        image_path = image_depot / f'{image_id}.jpg'
        db = YamlManger(image_db)
        db_data = db.get()
        try:
            if len(db_data) > 0:
                for img_info in db_data:
                    if img_info['url'] == image_data['url']:
                        return img_info['path']
        except TypeError:
            db_data = []
        image_requested = urlopen(image_data['url'])
        pil_image = Image.open(image_requested)
        width, heigth = pil_image.size
        print(width, heigth)
        if width > heigth:
            with image_path.open('wb') as img:
                img.write(urlopen(image_data['url']).read())
            db_data.append({
                **image_data,
                'id': image_id,
                'path': str(image_path),
            })
            db.set(db_data)
            return image_path
        else:
            return

    def set_wallpaper(self, image_path):
        """ Set image as a wallpaper. """
        WallpaperSetter.selector(image_path)


if __name__ == "__main__":
    from random import choice
    wall = Wallpaper(
        Path().cwd() / 'data' / 'config.yml'
    )
    posts = wall.get_reddit_posts()
    post = choice(posts)
    # post = posts[0]
    image_id = uuid4().hex
    image_path = wall.save_image(image_id, post)
    if image_path:
        print(post)
        # wall.save_image_to_depot(image_path, post['url'])
        wall.set_wallpaper(image_path)
    # print(posts)
