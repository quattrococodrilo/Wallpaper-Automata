""" This module is responsible for managing the wallpaper. """

import os
import platform
import re
import subprocess
from pathlib import Path
from random import choice
from urllib.request import urlopen
from uuid import uuid4

from PIL import Image

from wallauto.reddit import RedditClient
from wallauto.yamlmanager import YamlManger

# TODO: remove all methods for another operative system.

class WallpaperSetter:
    """ Selects a method to set Wallpaper according
    to the operative system. """

    @classmethod
    def selector(cls, image_path):
        """ Select method according to operative system. """
        system = platform.system().lower()

        if 'linux' in system:
            cls._linux(image_path)
        elif 'win' in system:
            cls._windows(image_path)
        else:
            cls._mac(image_path)

    @staticmethod
    def _linux(image_path):
        """ Method for Linux. """
        desktop = os.environ['XDG_CURRENT_DESKTOP'].lower()
        image_path = Path(image_path).absolute()

        if 'gnome' in desktop:
            subprocess.run([
                'gsettings',
                'set',
                'org.gnome.desktop.background',
                'picture-uri',
                f'file://{str(image_path)}'
            ])

    @staticmethod
    def _mac(image_path):
        """ Method for Mac. """
        subprocess.run([
            'osascript',
            '-e',
            ('\'tell application "Finder" to set desktop picture '
             f'to POSIX file "{str(image_path)}"\'')
        ])

    @staticmethod
    def _windows(image_path):
        """ Method for Windows. """
        # TODO:  <29-12-20, Fernando Cruz> #
        # Check if this command works
        subprocess.run([
            'reg',
            'add',
            r'"HKEY_CURRENT_USER\Control Panel\Desktop"',
            '/v',
            'Wallpaper',
            '/t',
            'REG_SZ',
            '/f',
            '/d',
            f'{str(image_path)}'
        ])
        subprocess.run([
            'RUNDLL32.EXE',
            'user32.dll,',
            'UpdatePerUserSystemParameters'
        ])


# TODO: Create a module only for configurations.
class WallpaperBuilder:
    """ Methods to get image from Reddit and set it as wallpaper.  """

    def __init__(self, config_file):
        self.config_file = config_file
        self.config_data = self.get_config_data(config_file)

    def get_config_data(self, config_file):
        """ Get data from config file.
        Params:
            config_file (pathlib.Path | string): path to config_file.
        """
        config_file = Path(config_file)

        return YamlManger(config_file).get()

    def get_reddit_posts(self):
        """ Get image posts from subreddit. """
        client_id = self.config_data['reddit_account']['client_id']
        client_secret = self.config_data['reddit_account']['client_secret']
        user_agent = self.config_data['reddit_account']['user_agent']

        if not client_id or not client_secret or not user_agent:
            raise Exception('Reddit credentials not found.')
        reddit = RedditClient(
            **self.config_data['reddit_account']
        )
        payload = {
            "subreddit": '+'.join(self.config_data['subreddits']),
            "secc": self.config_data['filter'],
            "time_filter": self.config_data['time_filter'],
            "limit": self.config_data['amount_post'],
        }
        try:
            posts = [
                {'title': post.title,
                 'author': post.author.name,
                 'url': post.url}

                for post in reddit.sub(**payload)

                if post.url.lower().endswith('.jpg')
                and 'https://i.redd.it/' in post.url
            ]

            return posts
        except TypeError as e:
            print(e)
            print('Post list is empty, it could be that '
                  'the post filter is not correct.')

            return []

    def get_image_size(self, image_data):
        pattern = r'\[\d\d\d\S[\s\S]*\]'
        sizes = re.search(pattern, image_data['title'])

        if sizes:
            return re.findall(r'\d\d\d\d', sizes.group())
        image_requested = urlopen(image_data['url'])
        pil_image = Image.open(image_requested)

        return pil_image.size

    def save_image(self, image_id, image_data):
        """ Save image data to a DB
        Params:
            image_id (string): id generated by uuid4.
            image_data (dict): {author, title, url}
        """
        width = 0
        heigth = 1
        try:
            width, heigth = self.get_image_size(image_data)
        except ValueError:
            pass

        if width > heigth:
            image_db = Path(self.config_data['image_db'])
            image_db.exists() or image_db.touch()
            image_depot = Path(self.config_data['image_depot'])
            image_path = image_depot / f'{image_id}.jpg'
            db = YamlManger(image_db)
            db_data = db.get()
            try:
                if len(db_data) > 0:
                    for img_info in db_data:
                        if img_info['url'] == image_data['url']:
                            return img_info['path']
            except TypeError:
                db_data = []
            with image_path.open('wb') as img:
                img.write(urlopen(image_data['url']).read())
            db_data.append({
                **image_data,
                'id': image_id,
                'path': str(image_path),
            })
            db.set(db_data)

            return image_path
        else:
            return

    def set_wallpaper(self, image_path):
        """ Set image as a wallpaper on desktop. """
        WallpaperSetter.selector(image_path)


class WallpaperClient:
    data_struture = {
        'image_depot': '',
        'image_db': '',
        'delete_on_change': False,
        'subreddits': ['EarthPorn', 'CityPorn', ],
        'filter': 'top',
        'time_filter': 'all',
        'amount_post': 25,
        'reddit_account': {
            'client_id': '',
            'client_secret': '',
            'user_agent': '',
        }
    }

    @staticmethod
    def get_config_file():
        system = platform.system().lower()
        config_file = None

        # TODO: Remove support for Windows.

        if 'win' in system:
            config_file = Path().home().joinpath(
                'AppData', 'Roaming', 'WallpaperAutomater', 'config.yml'
            )
        else:
            config_file = Path().home().joinpath(
                '.config', 'WallpaperAutomater', 'config.yml'
            )

        return config_file

    @classmethod
    def init_conf(cls, force=False):
        """ Creates de initial configuration. """
        config_file = cls.get_config_file()
        image_db = config_file.parent / 'image_db.yml'

        if not image_db.exists() or force:
            image_db.touch()
            cls.data_struture['image_db'] = str(image_db)
        image_depot = Path().home() / 'image_depot'

        if not image_depot.exists() or force:
            try:
                os.makedirs(image_depot)
            except FileExistsError:
                pass
            finally:
                cls.data_struture['image_depot'] = str(image_depot)

        if not config_file.exists() or force:
            try:
                os.makedirs(config_file.parent)
            except FileExistsError:
                pass
            finally:
                config_file.touch()
                YamlManger(config_file).set(cls.data_struture)

    @classmethod
    def wallpaper_random(cls):
        config_file = cls.get_config_file()
        conf_data = YamlManger(config_file).get()
        wallpaper = WallpaperBuilder(config_file)
        posts = wallpaper.get_reddit_posts()

        if len(posts) > 0:
            attemps = 0
            image_id = uuid4().hex

            while True or attemps >= conf_data['amount_post']:
                post = choice(posts)
                image_path = wallpaper.save_image(image_id, post)

                if image_path:
                    wallpaper.set_wallpaper(image_path)

                    return post
                attemps += 1

    @classmethod
    def wallpaper_random_from_depot(cls):
        config_file = cls.get_config_file()
        conf_data = YamlManger(config_file).get()
        image_depot = Path(conf_data['image_db'])
        images_data = YamlManger(image_depot).get()
        image = choice(images_data)
        wallpaper = WallpaperBuilder(config_file)
        wallpaper.set_wallpaper(image['path'])

        return image


if __name__ == "__main__":
    w = WallpaperClient()
    w.init_conf()
    w.wallpaper_random()
    # w.wallpaper_random_from_depot()
